# Carregando bibliotecas necessárias
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)

# Carregando os dados
listaDeEntregas <- readr::read_csv("data-raw/olist_orders_dataset.csv")
listaAvaliacao <- readr::read_csv("data-raw/olist_order_reviews_dataset.csv")

# Unindo os dados de entregas e avaliações
df <- listaDeEntregas |> 
  left_join(listaAvaliacao, by = "order_id")

# Tratando os dados e criando um dataframe apenas com o necessário
df <- na.omit(df)

dfTratado <- df |> 
  select(order_estimated_delivery_date, order_delivered_customer_date, review_score)

# Função para calcular a diferença em dias entre dois timestamps
calcular_diferenca_dias <- function(dataframe, coluna_inicio, coluna_fim) {
  dataframe |> 
    mutate(dias_ate_entrega = ifelse(!is.na({{coluna_fim}}), as.integer(as.Date({{coluna_fim}}) - as.Date({{coluna_inicio}})), NA))
}

# Aplicando a função ao dataframe
dfTratado <- calcular_diferenca_dias(dfTratado, order_estimated_delivery_date, order_delivered_customer_date)

# Removendo valores NA resultantes do cálculo da diferença de dias
dfTratado <- dfTratado |> 
  filter(!is.na(dias_ate_entrega))

# Agrupando todos os valores menores ou iguais a zero
dfTratado <- dfTratado |> 
  mutate(dias_ate_entrega = ifelse(dias_ate_entrega <= 0, 0, dias_ate_entrega))

# Dataframe com os dados necessários
df_atraso <- dfTratado |> 
  select(dias_ate_entrega, review_score)

# Criando o gráfico com a concentração de avaliações representada por cores
ggplot(df_atraso, aes(x = dias_ate_entrega, y = review_score)) +
  geom_point(alpha = 0.5) +
  stat_density_2d(aes(fill = after_stat(level)), geom = "polygon") +
  scale_fill_viridis_c() +
  labs(title = "Concentração de Avaliações por Dias até Entrega e Pontuação",
       x = "Dias até a Entrega",
       y = "Pontuação da Avaliação",
       fill = "Densidade") +
  theme_minimal()
